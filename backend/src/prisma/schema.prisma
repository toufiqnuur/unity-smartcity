// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_CONNECTION_STRING")
}

model User {
  id        String           @id @default(uuid())
  name      String?
  email     String           @unique
  photo     String?
  point     Int              @default(0)
  password  String
  createdAt DateTime         @default(now())
  oauthAccounts OauthAccount[]
  RefreshToken RefreshToken[]

  RedeemToken RedeemToken[]

  RedemptionHistory RedemptionHistory[]
}

model OauthAccount {
  id          Int     @id @default(autoincrement())
  userId      String
  provider    String
  providerId  String
  accessToken String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model TrashInfo {
  id           Int      @id @default(autoincrement())
  location     String
  description  String
  collectedAt  DateTime?
  latitude     Decimal  @db.Decimal(9, 6)
  longitude    Decimal  @db.Decimal(9, 6)
  status       String
  createdAt    DateTime @default(now())
}

model RedemptionHistory {
  id           Int      @id @default(autoincrement())
  userId       String
  point        Int
  token        String
  wasteType    String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model RedeemToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  point     Int
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}